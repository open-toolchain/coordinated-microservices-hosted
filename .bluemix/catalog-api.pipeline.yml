---
stages:
- name: BUILD
  inputs:
  - type: git
    branch: master
    service: ${CATALOG_API_REPO}
  triggers:
  - type: commit
  jobs:
  - name: Build
    type: builder
  - name: Unit Tests
    type: tester
    enable_tests: true
    test_file_pattern: ./tests/server/mochatest.xml
    coverage_type: istanbul
    coverage_directory: ./tests/server/coverage/reports/lcov-report
    coverage_file_pattern: ./tests/server/coverage/reports/coverage.json
    script: |-
      #!/bin/bash
      GRUNTFILE="tests/Gruntfile.js"
      if [ -f $GRUNTFILE ]; then
        npm install -g grunt@0.4.5 grunt-cli@0.1.13
        export PATH=/opt/IBM/node-v6.7.0/bin:$PATH
        npm install

        set +e
        grunt dev-test-cov --no-color --gruntfile $GRUNTFILE --base .
        grunt_result=$?
        set -e

        if [ $grunt_result -ne 0 ]; then
           exit $grunt_result
        fi
      else
        echo "$GRUNTFILE not found."
      fi
- name: STAGING
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: CF_APP_NAME
    value: undefined
    type: text
  - name: APP_URL
    value: undefined
    type: text
  - name: SAUCE_USERNAME
    value: {{services.test.parameters.username}}
    type: text
  - name: SAUCE_ACCESS_KEY
    value: {{services.test.parameters.key}}
    type: text
  - name: HOST
    value: ondemand.saucelabs.com
    type: text
  - name: PORT
    value: '80'
    type: text
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${STAGING_REGION_ID}
      organization: ${STAGING_ORG_NAME}
      space: ${STAGING_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      SERVICE=$(cf services | grep myMicroservicesCloudant ||:)
      if [ ! -z "$SERVICE" ]; then
        PLAN=$(echo $SERVICE | awk '{print $3}')
        if [ $PLAN == "Shared" ]; then
          echo "Attempting to delete deprecated service (myMicroservicesCloudant:$PLAN)."
          echo "Note: This can fail if the service is still bound to apps or service keys."
          echo "      If so, please delete these apps or service keys explicitly first."
          cf delete-service myMicroservicesCloudant -f
          cf create-service cloudantNoSQLDB Lite myMicroservicesCloudant
        else
          echo "Keeping existing service (myMicroservicesCloudant:$PLAN)."
        fi
      else
        cf create-service cloudantNoSQLDB Lite myMicroservicesCloudant
      fi
      # Push app
      export CF_APP_NAME="staging-$CF_APP"
      cf push "${CF_APP_NAME}"
      export APP_URL=http://$(cf app $CF_APP_NAME | grep -e urls: -e routes: | awk '{print $2}')      
      # View logs
      #cf logs "${CF_APP_NAME}" --recent
  - name: Sauce Labs Tests
    type: tester
    extension_id: ibm.devops.services.pipeline.saucelabs
    services:
      - ${SAUCE_LABS}
    target:
      region_id: ${STAGING_REGION_ID}
      organization: ${STAGING_ORG_NAME}
      space: ${STAGING_SPACE_NAME}
    DL_ASSETS: 'false'
    SELECT_CMD: custom
    COMMAND: |-
      #!/bin/bash
      GRUNTFILE="tests/Gruntfile.js"
      if [ -f $GRUNTFILE ]; then
        npm install -g grunt@0.4.5 grunt-cli@0.1.13
        export PATH=/opt/IBM/node-v6.7.0/bin:$PATH
        npm install
        echo $APP_URL | grep "stage1"
        if [ $? -eq 0 ]; then
          grunt test_fake --gruntfile $GRUNTFILE --base .
          grunt_result=$?
        else
          grunt test_real --gruntfile $GRUNTFILE --base .
          grunt_result=$?
        fi

        if [ $grunt_result -ne 0 ]; then
           exit $grunt_result
        fi
      else
        echo "$GRUNTFILE not found."
      fi
    enable_tests: true
    test_file_pattern: '*.xml'
- name: PRODUCTION
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: CF_APP_NAME
    value: undefined
    type: text
  jobs:
  - name: Blue/Green Deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |-
      #!/bin/bash
      SERVICE=$(cf services | grep myMicroservicesCloudant ||:)
      if [ ! -z "$SERVICE" ]; then
        PLAN=$(echo $SERVICE | awk '{print $3}')
        if [ $PLAN == "Shared" ]; then
          echo "Attempting to delete deprecated service (myMicroservicesCloudant:$PLAN)."
          echo "Note: This can fail if the service is still bound to apps or service keys."
          echo "      If so, please delete these apps or service keys explicitly first."
          cf delete-service myMicroservicesCloudant -f
          cf create-service cloudantNoSQLDB Lite myMicroservicesCloudant
        else
          echo "Keeping existing service (myMicroservicesCloudant:$PLAN)."
        fi
      else
        cf create-service cloudantNoSQLDB Lite myMicroservicesCloudant
      fi
      if ! cf app $CF_APP; then  
        cf push $CF_APP
      else
        OLD_CF_APP=${CF_APP}-OLD-$(date +"%s")
        rollback() {
          set +e  
          if cf app $OLD_CF_APP; then
            cf logs $CF_APP --recent
            cf delete $CF_APP -f
            cf rename $OLD_CF_APP $CF_APP
          fi
          exit 1
        }
        set -e
        trap rollback ERR
        cf rename $CF_APP $OLD_CF_APP
        cf push $CF_APP
        cf delete $OLD_CF_APP -f
      fi
